{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-13T05:59:39.845Z",
    "end": "2023-08-13T05:59:45.205Z",
    "duration": 5360,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c382c3d0-bd67-44ce-a486-7134699243f0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9c718681-5b4b-4eca-93c8-db558053ed15",
          "title": "Add category",
          "fullFile": "D:\\zuhair-sanbercode\\js-automation\\suite\\products.suite.js",
          "file": "\\suite\\products.suite.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new category first",
              "fullTitle": "Add category should create a new category first",
              "timedOut": false,
              "duration": 1871,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = await getToken()\nconst payload = \n{\n    \"name\": \"Snack Ringan\"\n}\nconst response = await createCat(payload,token)\n// console.log((await response).body)\nconst categoryId = await response.body.data.categoryId;\nconst categoryName = await response.body.data.name;\nconst jsonData = JSON.parse(fs.readFileSync(jsonPathCategory, 'utf8')); //read file JSON dari folder data\njsonData.data.name = categoryName; //mengirim value categoryName ke dalam file JSON\njsonData.data.categoryId = categoryId;\nfs.writeFileSync(jsonPathCategory, JSON.stringify(jsonData, null, 2))\nexpect((await response).status).to.equal(201);",
              "err": {},
              "uuid": "336b169d-bc07-471a-b3bd-2ec44434e70e",
              "parentUUID": "9c718681-5b4b-4eca-93c8-db558053ed15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "336b169d-bc07-471a-b3bd-2ec44434e70e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1871,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4d743008-f69e-4b74-8121-04dace14eb6f",
          "title": "Products feature",
          "fullFile": "D:\\zuhair-sanbercode\\js-automation\\suite\\products.suite.js",
          "file": "\\suite\\products.suite.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new product",
              "fullTitle": "Products feature should create a new product",
              "timedOut": false,
              "duration": 609,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = await getToken()\nconst jsonDataCategory = JSON.parse(fs.readFileSync(jsonPathCategory, 'utf8'));\nconst payload = {\n    \"category_id\": jsonDataCategory.data.categoryId, \n    \"code\": \"A314ASDDFIER3432\",\n    \"name\": \"Good Time Cookies\",\n    \"price\": \"3500\",\n    \"cost\": \"3000\",\n    \"stock\": \"5\"\n}\nconst response = await createProduct(payload,token)\n// console.log((await response).body)\nconst productId = await response.body.data.productId; //mengambil value dari unitId di response body\nconst unitName = await response.body.data.name;\nconst jsonData = JSON.parse(fs.readFileSync(jsonPath, 'utf8')); //read file JSON dari folder data\njsonData.data.productId = productId; //mengirim value unitId ke dalam file JSON\njsonData.data.name = unitName;\nfs.writeFileSync(jsonPath, JSON.stringify(jsonData, null, 2)) //menyimpan value unitId ke dalam file JSON\nexpect((await response).status).to.equal(201);\nexpect((await response).body.message).to.equal(\"Product berhasil ditambahkan\");\n// console.log((await response).body);",
              "err": {},
              "uuid": "4ed9f6f0-5771-4b2c-911c-7b75eadfefb2",
              "parentUUID": "4d743008-f69e-4b74-8121-04dace14eb6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a product",
              "fullTitle": "Products feature should get a product",
              "timedOut": false,
              "duration": 721,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const jsonData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'))\nconst productId = jsonData.data.productId \nconst token = await getToken()\nconst response = await request(config.baseUrlKA)\n.get(`/products/` + `${productId}`)\n.set(\"Authorization\", `Bearer ${token}`)\nexpect((await response).status).to.equal(200);\nconsole.log((await response).body);\nexpect((await response).body.data.product.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\")\nexpect((await response).body.data.product.price).to.be.a('number')\nexpect((await response).body.data.product.price).to.be.at.least(0, \"Price should be a non-negative number\")\n//console.log((await response).body);",
              "err": {},
              "uuid": "29d9f54f-4fcd-424a-b8a3-1feac906e106",
              "parentUUID": "4d743008-f69e-4b74-8121-04dace14eb6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a product",
              "fullTitle": "Products feature should update a product",
              "timedOut": false,
              "duration": 1428,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = await getToken()\nconst jsonDataCategory = JSON.parse(fs.readFileSync(jsonPathCategory, 'utf8'));\nconst payload = {\n    \"category_id\": jsonDataCategory.data.categoryId, \n    \"code\": \"A314ASDDFIER3432\",\n    \"name\": \"Good Time Cookies\",\n    \"price\": \"5000\",\n    \"cost\": \"3000\",\n    \"stock\": \"100\"\n}\nconst response = await updateProduct(payload,token)\nconst jsonData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'))\nconst name = await response.body.data.name; //mengambil value dari name di response body\nconst price = await response.body.data.price;\nconst stock = await response.body.data.stock;\njsonData.data.name = name; //mengirim value name ke dalam file JSON\njsonData.data.price = price;\njsonData.data.stock = stock;\nfs.writeFileSync(jsonPath, JSON.stringify(jsonData, null, 2)) //menyimpan value name ke dalam file JSON\nexpect((await response).status).to.equal(200);\nexpect((await response).body.data.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\")\n//console.log((await response).body);\nawait runGetProductTest();",
              "err": {},
              "uuid": "abd32c59-9c3b-4524-ab3d-defb8b27ba44",
              "parentUUID": "4d743008-f69e-4b74-8121-04dace14eb6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a product",
              "fullTitle": "Products feature should delete a product",
              "timedOut": false,
              "duration": 711,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const jsonData = JSON.parse(fs.readFileSync(jsonPath, 'utf8')) //mengambil file JSON dari folder data\nconst productId = jsonData.data.productId\nconst token = await getToken()\nconst response = await request(config.baseUrlKA)\n.del(`/products/` + `${productId}`)\n.set(\"Authorization\", `Bearer ${token}`)\nexpect((await response).status).equal(200);\nexpect((await response).body.message).to.equal(\"Product berhasil dihapus\");\n//console.log((await response).body)",
              "err": {},
              "uuid": "5696c7c7-f049-45bd-8cc5-7718b75eebcc",
              "parentUUID": "4d743008-f69e-4b74-8121-04dace14eb6f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4ed9f6f0-5771-4b2c-911c-7b75eadfefb2",
            "29d9f54f-4fcd-424a-b8a3-1feac906e106",
            "abd32c59-9c3b-4524-ab3d-defb8b27ba44",
            "5696c7c7-f049-45bd-8cc5-7718b75eebcc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3469,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}